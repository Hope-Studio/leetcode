(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{516:function(e,t,n){"use strict";n.r(t);var a=n(1),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_104-maximum-depth-of-binary-tree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_104-maximum-depth-of-binary-tree"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("104. Maximum Depth of Binary Tree"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Given a binary tree, find its maximum depth.")]),e._v(" "),n("p",[e._v("The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.")]),e._v(" "),n("p",[n("strong",[e._v("Note:")]),e._v(" A leaf is a node with no children.")]),e._v(" "),n("p",[n("strong",[e._v("Example:")])]),e._v(" "),n("p",[e._v("Given binary tree "),n("code",[e._v("[3,9,20,null,null,15,7]")]),e._v(",")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    3\n   / \\\\\n  9  20\n    /  \\\\\n   15   7\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("return its depth = 3.")])])}),[],!1,null,null,null);t.default=r.exports}}]);