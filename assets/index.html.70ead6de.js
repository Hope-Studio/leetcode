import{_ as r,V as o,W as s,X as e,$ as a,Y as n,a0 as i,z as c}from"./framework.8f854aa5.js";const d={},l={id:"_1603-design-parking-system",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#_1603-design-parking-system","aria-hidden":"true"},"#",-1),u={href:"https://leetcode.com/problems/design-parking-system/",target:"_blank",rel:"noopener noreferrer"},m=i('<p>Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.</p><p>Implement the <code>ParkingSystem</code> class:</p><ul><li><code>ParkingSystem(int big, int medium, int small)</code> Initializes object of the <code>ParkingSystem</code> class. The number of slots for each parking space are given as part of the constructor.</li><li><code>bool addCar(int carType)</code> Checks whether there is a parking space of <code>carType</code> for the car that wants to get into the parking lot. <code>carType</code> can be of three kinds: big, medium, or small, which are represented by <code>1</code>, <code>2</code>, and <code>3</code> respectively. <strong>A car can only park in a parking space of its</strong> <code>carType</code>. If there is no space available, return <code>false</code>, else park the car in that size space and return <code>true</code>.</li></ul><p><strong>Example 1:</strong></p><p><strong>Input</strong> [&quot;ParkingSystem&quot;, &quot;addCar&quot;, &quot;addCar&quot;, &quot;addCar&quot;, &quot;addCar&quot;] [[1, 1, 0], [1], [2], [3], [1]] <strong>Output</strong> [null, true, true, false, false]</p><p><strong>Explanation</strong> ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0); parkingSystem.addCar(1); // return true because there is 1 available slot for a big car parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car parkingSystem.addCar(3); // return false because there is no available slot for a small car parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.</p><h2 id="constraints" tabindex="-1"><a class="header-anchor" href="#constraints" aria-hidden="true">#</a> Constraints</h2><ul><li><code>0 &lt;= big, medium, small &lt;= 1000</code></li><li><code>carType</code> is <code>1</code>, <code>2</code>, or <code>3</code></li><li>At most <code>1000</code> calls will be made to <code>addCar</code></li></ul>',8);function g(h,f){const t=c("ExternalLinkIcon");return o(),s("div",null,[e("h1",l,[p,a(),e("a",u,[a("1603. Design Parking System"),n(t)])]),m])}const b=r(d,[["render",g],["__file","index.html.vue"]]);export{b as default};
