import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c as a,a as t,d as n,b as p,e as u}from"./app-b54447e7.js";const i={},c={id:"_53-maximum-subarray",tabindex:"-1"},g=t("a",{class:"header-anchor",href:"#_53-maximum-subarray","aria-hidden":"true"},"#",-1),l={href:"https://leetcode.com/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"},m=u('<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return <em>its sum</em>.</p><p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]</p><p><strong>Output:</strong> 6</p><p><strong>Explanation:</strong> [4,-1,2,1] has the largest sum = 6.</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> nums = [1]</p><p><strong>Output:</strong> 1</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> nums = [0]</p><p><strong>Output:</strong> 0</p><p><strong>Example 4:</strong></p><p><strong>Input:</strong> nums = [-1]</p><p><strong>Output:</strong> -1</p><p><strong>Example 5:</strong></p><p><strong>Input:</strong> nums = [-2147483647]</p><p><strong>Output:</strong> -2147483647</p><h2 id="constraints" tabindex="-1"><a class="header-anchor" href="#constraints" aria-hidden="true">#</a> Constraints</h2><ul><li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li></ul>',20);function d(h,_){const o=r("ExternalLinkIcon");return s(),a("div",null,[t("h1",c,[g,n(),t("a",l,[n("53. Maximum Subarray"),p(o)])]),m])}const b=e(i,[["render",d],["__file","index.html.vue"]]);export{b as default};
