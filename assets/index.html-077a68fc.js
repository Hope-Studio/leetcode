import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c as a,a as e,d as t,b as i,e as p}from"./app-b54447e7.js";const l={},c={id:"_136-single-number",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#_136-single-number","aria-hidden":"true"},"#",-1),d={href:"https://leetcode.com/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},u=p('<p>Given a <strong>non-empty</strong> array of integers <code>nums</code>, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Follow up:</strong> Could you implement a solution with a linear runtime complexity and without using extra memory?</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> nums = [2,2,1]</p><p><strong>Output:</strong> 1</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> nums = [4,1,2,1,2]</p><p><strong>Output:</strong> 4</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> nums = [1]</p><p><strong>Output:</strong> 1</p><h2 id="constraints" tabindex="-1"><a class="header-anchor" href="#constraints" aria-hidden="true">#</a> Constraints</h2><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-3 * 104 &lt;= nums[i] &lt;= 3 * 104</code></li><li>Each element in the array appears twice except for one element which appears only once.</li></ul>',13);function g(h,_){const n=r("ExternalLinkIcon");return s(),a("div",null,[e("h1",c,[m,t(),e("a",d,[t("136. Single Number"),i(n)])]),u])}const b=o(l,[["render",g],["__file","index.html.vue"]]);export{b as default};
