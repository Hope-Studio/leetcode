import{_ as s,W as r,X as o,Y as n,a0 as e,Z as i,a1 as a,C as p}from"./framework-45146e23.js";const c={},m={id:"_268-missing-number",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#_268-missing-number","aria-hidden":"true"},"#",-1),l={href:"https://leetcode.com/problems/missing-number/",target:"_blank",rel:"noopener noreferrer"},g=a('<p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return <em>the only number in the range that is missing from the array.</em></p><p><strong>Follow up:</strong> Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> nums = [3,0,1]</p><p><strong>Output:</strong> 2</p><p><strong>Explanation:</strong> n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.</p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> nums = [0,1]</p><p><strong>Output:</strong> 2</p><p><strong>Explanation:</strong> n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> nums = [9,6,4,2,3,5,7,0,1]</p><p><strong>Output:</strong> 8</p><p><strong>Explanation:</strong> n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.</p><p><strong>Example 4:</strong></p><p><strong>Input:</strong> nums = [0]</p><p><strong>Output:</strong> 1</p><p><strong>Explanation:</strong> n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.</p><h2 id="constraints" tabindex="-1"><a class="header-anchor" href="#constraints" aria-hidden="true">#</a> Constraints</h2><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= n</code></li><li>All the numbers of <code>nums</code> are <strong>unique</strong>.</li></ul>',20);function d(h,_){const t=p("ExternalLinkIcon");return r(),o("div",null,[n("h1",m,[u,e(),n("a",l,[e("268. Missing Number"),i(t)])]),g])}const x=s(c,[["render",d],["__file","index.html.vue"]]);export{x as default};
